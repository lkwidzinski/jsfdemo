package com.example.jsfdemo.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.example.jsfdemo.domain.Plane;

public class PlaneDBConn {
	
	private Connection connection;
	private Statement statement;
	private ResultSet rs;
	private String createTable="CREATE TABLE Planes (id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
					" name varchar(20), tailnumber varchar(6), capacity int, passengers int," +
					"destination varchar(20), readytogo boolean);";
	
	private String addPlaneSQL="INSERT INTO Planes (name,tailnumber,capacity,passengers,destination,readytogo) " +
			"VALUES (?,?,?,?,?,?);";
	private String removePlaneSQL="DELETE FROM Planes where tailnumber=?;";
	private String getAllSQL="SELECT * from Planes;";
	
	PreparedStatement addPlane;
	PreparedStatement removePlane;
	PreparedStatement getAll;
	
	public PlaneDBConn() {
		try {
			Context ctx = new InitialContext();
			DataSource ds = (DataSource) ctx.lookup("jdbc/hsqldb");
			connection = ds.getConnection();
			statement = connection.createStatement();

			rs = connection.getMetaData().getTables(null, null, null,
			null);
			
			boolean tableExists=false;
			while (rs.next()) {
				if ("Planes".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
				}
			}
			if(!tableExists)
			{
			statement.executeUpdate(createTable);

			}
			addPlane=connection.prepareStatement(addPlaneSQL);
			removePlane=connection.prepareStatement(removePlaneSQL);
			getAll=connection.prepareStatement(getAllSQL);
			} catch (SQLException e) {
			e.printStackTrace();
			}
			catch(NamingException n){
			n.printStackTrace();
			}
	}
	public boolean addPlane(Plane obj) {
		try {
		addPlane.setString(1, obj.getName());
		addPlane.setString(2, obj.getTailNumber());
		addPlane.setInt(3, obj.getCapacity());
		addPlane.setInt(4, obj.getPassengers());
		addPlane.setString(5, obj.getDestination());
		addPlane.setBoolean(6, obj.isReadyToGo());
		return addPlane.execute();
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return false;
	}
	public boolean removePlane(Plane obj) {
		try {
		removePlane.setString(1, obj.getTailNumber());
		return removePlane.execute();
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return false;
	}
	
	public List<Plane> getAll(){
		List<Plane> result= new ArrayList<Plane>();

		try {
		ResultSet rs= getAll.executeQuery();
		while(rs.next())
		{
		Plane p = new Plane(rs.getString("name"), rs.getString("tailnumber"),rs.getInt("capacity"), rs.getInt("passengers"), rs.getString("destination"), rs.getBoolean("readytogo"));
		result.add(p);
		}

		} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		}
		return result;
		
	}
}
