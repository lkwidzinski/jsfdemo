package com.example.jsfdemo.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.example.jsfdemo.domain.Person;

public class PersonDBConn {
	
	private Connection connection;
	private Statement statement;
	private ResultSet rs;
	private String createTable2="CREATE TABLE Persons (id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
			" firstname varchar(20), lastname varchar(20), pesel int,additionalinfo varchar(40));";
	
	private String addPersonSQL="INSERT INTO Persons (firstname,lastname,pesel,additionalinfo) " +
			"VALUES (?,?,?,?);";
	private String removePersonSQL="DELETE FROM Persons where pesel=?;";
	private String getAllPersonsSQL="SELECT * from Persons;";
	
	PreparedStatement addPerson;
	PreparedStatement removePerson;
	PreparedStatement getAllPersons;
	
	public PersonDBConn() {
		try {
			Context ctx = new InitialContext();
			DataSource ds = (DataSource) ctx.lookup("jdbc/hsqldb");
			connection = ds.getConnection();
			statement = connection.createStatement();

			rs = connection.getMetaData().getTables(null, null, null,
			null);
			
			boolean tableExists=false;
			while (rs.next()) {
				if ("Persons".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
				}
			}
			
			if(!tableExists)
			{
			statement.executeUpdate(createTable2);

			}
			addPerson=connection.prepareStatement(addPersonSQL);
			removePerson=connection.prepareStatement(removePersonSQL);
			getAllPersons=connection.prepareStatement(getAllPersonsSQL);
		} catch (SQLException e) {
		e.printStackTrace();
		}
		catch(NamingException n){
		n.printStackTrace();
		}
	}
	public boolean addPerson(Person obj) {
		try {
		addPerson.setString(1, obj.getFirstName());
		addPerson.setString(2, obj.getLastName());
		addPerson.setInt(3, obj.getPesel());
		addPerson.setString(4, obj.getAdditionalInfo());
		return addPerson.execute();
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return false;
	}
	public boolean removePerson(Person obj) {
		try {
		removePerson.setInt(1, obj.getPesel());
		return removePerson.execute();
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return false;
	}
	public List<Person> getAllPersons(){
		List<Person> result= new ArrayList<Person>();

		try {
		ResultSet rs= getAllPersons.executeQuery();
		while(rs.next())
		{
		Person p = new Person(rs.getString("firstname"), rs.getString("lastname"),rs.getInt("pesel"),rs.getString("additionalinfo"));
		result.add(p);
		}

		} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		}
		return result;
		
	}		

}
